// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using wh4Shop.DataEntity;

namespace wh4Shop.DataEntity.Migrations
{
    [DbContext(typeof(wh4ShopDbContext))]
    [Migration("20210303092845_db1")]
    partial class db1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("RoleClaim", "wh4shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserClaim", "wh4shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserLogin", "wh4shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRole", "wh4shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserToken", "wh4shop");
                });

            modelBuilder.Entity("wh4Shop.DataEntity.EntityModels.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<long>("LegalEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AppRoles", "wh4shop");
                });

            modelBuilder.Entity("wh4Shop.DataEntity.EntityModels.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ClientType")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AppUsers", "wh4shop");
                });

            modelBuilder.Entity("wh4Shop.DataEntity.EntityModels.Ccount", b =>
                {
                    b.Property<long>("CntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Attribute1")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute3")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute4")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute5")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CcountCode")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("CcountStatus")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("CcountType")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<Guid>("CreationBy")
                        .HasMaxLength(60)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("LastUpdateBy")
                        .HasMaxLength(60)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("CntId");

                    b.HasIndex("CreationDate");

                    b.HasIndex("LastUpdateDate");

                    b.ToTable("Ccounts", "wh4shop");
                });

            modelBuilder.Entity("wh4Shop.DataEntity.EntityModels.CcountLine", b =>
                {
                    b.Property<long>("CntLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Attribute1")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute3")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute4")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute5")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("CntId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreationBy")
                        .HasMaxLength(60)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("InventoryQuantity")
                        .HasColumnType("numeric");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid>("LastUpdateBy")
                        .HasMaxLength(60)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Sku")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("CntLineId");

                    b.HasIndex("CntId");

                    b.HasIndex("CreationDate");

                    b.HasIndex("LastUpdateDate");

                    b.ToTable("CcountLines", "wh4shop");
                });

            modelBuilder.Entity("wh4Shop.DataEntity.EntityModels.InvOnHand", b =>
                {
                    b.Property<string>("Itemcode")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Sku")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Attribute1")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute3")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute4")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute5")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("LastTransactionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OnHandRunDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Itemcode", "Sku");

                    b.HasIndex("OnHandRunDate");

                    b.ToTable("InvOnHands", "wh4shop");
                });

            modelBuilder.Entity("wh4Shop.DataEntity.EntityModels.InvTransaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Attribute1")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute3")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute4")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute5")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("CreationBy")
                        .HasMaxLength(60)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("FromOrganization")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LastUpdateBy")
                        .HasMaxLength(60)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OwnerOrganization")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionAction")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<decimal>("TransactionQuantity")
                        .HasColumnType("numeric");

                    b.Property<long>("TransactionSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionStatus")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Uom")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("TransactionId");

                    b.HasIndex("CreationDate");

                    b.HasIndex("LastUpdateDate");

                    b.HasIndex("TransactionId", "TransactionSetId")
                        .IsUnique();

                    b.ToTable("InvTransactions", "wh4shop");
                });

            modelBuilder.Entity("wh4Shop.DataEntity.EntityModels.LegalProfile", b =>
                {
                    b.Property<long>("LegalEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Attribute1")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute3")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute4")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute5")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("CreationBy")
                        .HasMaxLength(60)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastUpdateBy")
                        .HasMaxLength(60)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalAddress")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("LegalName")
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)");

                    b.Property<string>("LegalType")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("LegalEntityId");

                    b.HasIndex("CreationDate");

                    b.HasIndex("LastUpdateDate");

                    b.ToTable("LegalProfiles", "wh4shop");
                });

            modelBuilder.Entity("wh4Shop.DataEntity.EntityModels.LicenceProfile", b =>
                {
                    b.Property<long>("LicenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LicenceKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LicenceType")
                        .HasColumnType("text");

                    b.Property<int>("MaxUser")
                        .HasColumnType("integer");

                    b.HasKey("LicenceId");

                    b.HasIndex("ExpiredDate");

                    b.HasIndex("IssueDate");

                    b.HasIndex("LicenceKey")
                        .IsUnique();

                    b.ToTable("LicenceProfiles", "wh4shop");
                });

            modelBuilder.Entity("wh4Shop.DataEntity.EntityModels.MasterItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Attribute1")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute3")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute4")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute5")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("CreationBy")
                        .HasMaxLength(60)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<decimal>("ItemCost")
                        .HasColumnType("numeric");

                    b.Property<string>("ItemName")
                        .HasColumnType("text");

                    b.Property<string>("ItemSku")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("LastUpdateBy")
                        .HasMaxLength(60)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LegalEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("LastUpdateDate");

                    b.HasIndex("ItemCode", "ItemSku")
                        .IsUnique();

                    b.HasIndex("ItemCode", "OrganizationId")
                        .IsUnique();

                    b.HasIndex("LegalEntityId", "OrganizationId")
                        .IsUnique();

                    b.ToTable("MasterItems", "wh4shop");
                });

            modelBuilder.Entity("wh4Shop.DataEntity.EntityModels.Organization", b =>
                {
                    b.Property<long>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Attribute1")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute3")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute4")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attribute5")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("CreationBy")
                        .HasMaxLength(60)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LastUpdateBy")
                        .HasMaxLength(60)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LegalEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("OrganizationAddress")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("OrganizationCode")
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)");

                    b.Property<string>("OrganizationType")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("OrganizationId");

                    b.HasIndex("CreationDate");

                    b.HasIndex("LastUpdateDate");

                    b.ToTable("Organizations", "wh4shop");
                });

            modelBuilder.Entity("wh4Shop.DataEntity.EntityModels.CcountLine", b =>
                {
                    b.HasOne("wh4Shop.DataEntity.EntityModels.Ccount", "Ccount")
                        .WithMany("CcountLines")
                        .HasForeignKey("CntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ccount");
                });

            modelBuilder.Entity("wh4Shop.DataEntity.EntityModels.Ccount", b =>
                {
                    b.Navigation("CcountLines");
                });
#pragma warning restore 612, 618
        }
    }
}
